{"version":3,"sources":["serviceWorker.js","components/ErrorBoundary.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","map","user","i","key","Scroll","style","overflow","height","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCISC,E,YAnBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAU,GAHK,E,+EAOHC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,uDAEAG,KAAKL,MAAMO,a,GAhBMC,aCYbC,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,yBAAKC,UAAU,OACb,2BAAOA,UAAU,mCACjBC,KAAK,SACLC,YAAY,mBACZC,SAAUJ,MCODK,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC1B,OACE,yBAAKP,UAAU,0DACb,yBAAKQ,IAAI,WAAWC,IAAG,8BAAyBF,EAAzB,4BACvB,6BACE,4BAAKF,GACL,2BAAIC,MCcGI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCHhBU,EARA,SAAC5B,GACd,OACE,yBAAK6B,MAAO,CAACC,SAAU,SAAUC,OAAQ,UACtC/B,EAAMO,WC0CEyB,G,kBAvCb,aAAe,IAAD,8BACZ,+CAaJC,eAAiB,SAACC,GAChB,EAAK5B,SAAS,CAACI,YAAawB,EAAMC,OAAOC,SAbvC,EAAKnC,MAAQ,CACXsB,OAAQ,GACRb,YAAa,IAJH,E,iFAQQ,IAAD,OAClB2B,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKnC,SAAS,CAACiB,OAAOkB,S,+BAO/B,IAAD,EACwBpC,KAAKJ,MAA5BsB,EADD,EACCA,OAAQb,EADT,EACSA,YACVgC,EAAiBnB,EAAOoB,QAAO,SAAAC,GACnC,OAAOA,EAAM3B,KAAK4B,cAAcC,SAASpC,EAAYmC,kBAEvD,OAAStB,EAAOwB,OAGd,yBAAKnC,UAAU,MACd,wBAAIA,UAAU,MAAd,YACE,kBAAC,EAAD,CAAWD,aAAgBN,KAAK4B,iBAClC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUV,OAAWmB,OAP1B,6C,GAzBYlC,c,MCAlBwC,IAASC,OACP,kBAAC,EAAD,MAAQC,SAASC,eAAe,SP2H5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtD,GACLuD,QAAQvD,MAAMA,EAAMwD,a","file":"static/js/main.c8bc3e30.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\ncomponentDidCatch(error, info) {\n  this.setState({ hasError: true })\n}\n\nrender() {\n  if (this.state.hasError) {\n    return <h1>Ooops. That is not good</h1>\n  }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input className='pa3 ba b--green bg-lightest-blue'\n      type=\"search\" \n      placeholder=\"Find your bot...\"\n      onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n  return (\n    <div className='tc bg-light-green dib w5 br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robohash' src={`http://robohash.org/${id}?set=set3&size=150x150`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from  './Card';\n\nconst CardList = ({robots}) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card \n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n);\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflow: 'scroll', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport '../containers/App.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n   }\n\n   componentDidMount() {\n     fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({robots:users}));\n   }\n\nonSearchChange = (event) => {\n  this.setState({searchfield: event.target.value})\n}\n\n  render() {\n    const { robots, searchfield} = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return (!robots.length) ?\n      <h1>Loading..</h1> :\n     (\n      <div className='tc'>\n       <h1 className='f1'>Robobook</h1>\n         <SearchBox searchChange = {this.onSearchChange}/>\n       <Scroll>  \n         <ErrorBoundary>\n           <CardList robots = { filteredRobots }/>\n         </ErrorBoundary>\n       </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\n\nReactDOM.render(\n  <App/>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}